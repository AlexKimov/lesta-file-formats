//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint i, k, size, index, line;

UBYTE Count1;
UBYTE Count2;

struct {
  typedef struct {
    UINT16 OffsetX; 
    UINT16 OffsetY; 
    UINT16 ColCount;
    UINT16 RowCount;
    UINT16 ImageWidth; 
    UINT16 ImageU;
    UINT Size;
    UINT Offset;
  } FILE_REC;

  FILE_REC FileRec[Count1 * 5];

  for (k = 0; k < 5; ++k)
  {
    struct {
      for (i = 0; i < Count1; ++i) 
      {
        index = i + (Count1 * k); 
        FSeek(FileRec[index].Offset);

        struct {
          size = FileRec[index].Size;
          while (size) 
          {
            struct {
              BYTE Data[FileRec[index].ColCount * 2];
            } LINE;
            size -= sizeof(LINE);
          }
        } FILE;
      };
    } K;
  } 

} S[Count2] <optimize=false>;